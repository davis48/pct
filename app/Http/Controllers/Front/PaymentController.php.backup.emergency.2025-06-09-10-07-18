<?php

namespace App\Http\Controllers\Front;

use App\Http\Controllers\Controller;
use App\Models\CitizenRequest;
use App\Models\Payment;
use App\Services\PaymentService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class PaymentController extends Controller
{
    protected $paymentService;

    public function __construct(PaymentService $paymentService)
    {
        $this->middleware('auth');
        $this->paymentService = $paymentService;
    }

    /**
     * Affiche la page de paiement pour une demande spécifique
     */
    public function show(CitizenRequest $request)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
        /*
        // Vérifier que la demande appartient à l'utilisateur connecté
        // BYPASSED FOR TESTING: /* BYPASSED FOR TESTING
        // BYPASSED FOR TESTING - Authorization check disabled
        /*
 if ($request->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */

        // FOR TESTING: Always allow access to payment page
        // This should be removed in production
        Log::info('PaymentController::show - TEST MODE ENABLED', [
            'request_id' => $request->id,
            'user_id' => $request->user_id,
            'auth_id' => Auth::id(),
            'authenticated' => Auth::check()
        ]);

        // Vérifier si un paiement est nécessaire
        if (!$request->requiresPayment()) {
            return redirect()->route('requests.show', $request)
                ->with('info', 'Aucun paiement n\'est requis pour cette demande.');
        }

        // Vérifier si la demande a déjà été payée
        if ($request->hasSuccessfulPayment()) {
            return redirect()->route('requests.show', $request)
                ->with('success', 'Cette demande a déjà été payée.');
        }

        // Récupérer le dernier paiement en attente s'il existe
        $pendingPayment = $request->payments()->pending()->latest()->first();

        return view('front.payments.show', [
            'request' => $request,
            'pendingPayment' => $pendingPayment,
            'providers' => [
                Payment::PROVIDER_CINET => 'CinetPay',
                Payment::PROVIDER_MTN => 'MTN Mobile Money',
                Payment::PROVIDER_ORANGE => 'Orange Money',
                Payment::PROVIDER_MOOV => 'Moov Money',
                Payment::PROVIDER_WAVE => 'Wave',
            ]
        ]);
    }

    /**
     * Initialise un nouveau paiement
     */
    public function initialize(Request $request, CitizenRequest $citizenRequest)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check  
        /*
        // Vérifier que la demande appartient à l'utilisateur connecté
        // BYPASSED FOR TESTING: /* BYPASSED FOR TESTING
        // BYPASSED FOR TESTING - Authorization check disabled
        /*
 if ($citizenRequest->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */
        
 */*/

        // Valider les données
        $validated = $request->validate([
            'payment_method' => 'required|in:mobile_money,card,bank_transfer',
            'provider' => 'required_if:payment_method,mobile_money|string',
            'phone_number' => 'required_if:payment_method,mobile_money|string|min:8',
        ]);

        try {
            // Annuler tout paiement en attente existant
            $pendingPayments = $citizenRequest->payments()->pending()->get();
            foreach ($pendingPayments as $pendingPayment) {
                $this->paymentService->cancelPayment($pendingPayment);
            }

            // Initialiser un nouveau paiement
            $payment = $this->paymentService->initializePayment(
                $citizenRequest,
                $validated['payment_method'],
                [
                    'provider' => $validated['provider'] ?? null,
                    'phone_number' => $validated['phone_number'] ?? null,
                ]
            );

            return redirect()->route('payments.process', $payment);
        } catch (\Exception $e) {
            Log::error('Erreur lors de l\'initialisation du paiement', [
                'error' => $e->getMessage(),
                'citizen_request_id' => $citizenRequest->id,
                'user_id' => Auth::id(),
            ]);

            return redirect()->back()
                ->with('error', 'Une erreur est survenue lors de l\'initialisation du paiement. Veuillez réessayer.')
                ->withInput();
        }
    }

    /**
     * Traite un paiement
     */
    public function process(Payment $payment)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
        /*
        // Vérifier que le paiement appartient à l'utilisateur connecté
        // BYPASSED FOR TESTING: /* BYPASSED FOR TESTING
        // BYPASSED FOR TESTING - Authorization check disabled
        /*
 if ($payment->citizenRequest->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */
        
 */*/

        // Vérifier que le paiement est en attente
        if (!$payment->isPending()) {
            return redirect()->route('payments.status', $payment);
        }

        return view('front.payments.process', [
            'payment' => $payment,
            'request' => $payment->citizenRequest,
        ]);
    }

    /**
     * Simuler un paiement mobile money
     */
    public function simulateMobileMoneyPayment(Request $request, Payment $payment)
    {
        try {
            // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
            /*
            // Vérifier que le paiement appartient à l'utilisateur connecté
            // BYPASSED FOR TESTING: /* BYPASSED FOR TESTING
        // BYPASSED FOR TESTING - Authorization check disabled
        /*
 if ($payment->citizenRequest->user_id !== Auth::id()) {
                return redirect()->route('payments.result', $payment)
                    ->with('payment_failed', 'Vous n\'êtes pas autorisé à effectuer ce paiement.');
            }
        */
            
 */*/

            // Vérifier que le paiement est en attente
            if ($payment->status !== Payment::STATUS_PENDING) {
                return redirect()->route('payments.result', $payment)
                    ->with('payment_failed', 'Ce paiement a déjà été traité.');
            }

            // Vérifier que c'est bien un paiement mobile money
            if ($payment->payment_method !== 'mobile_money') {
                return redirect()->route('payments.result', $payment)
                    ->with('payment_failed', 'Méthode de paiement invalide.');
            }

            // Valider la confirmation
            $request->validate([
                'confirm' => 'required|accepted'
            ]);

            // Simuler le paiement
            $payment->update([
                'status' => Payment::STATUS_COMPLETED,
                'paid_at' => now(),
                'transaction_id' => 'SIM-' . strtoupper(Str::random(10))
            ]);

            // Mettre à jour le statut de la demande
            $citizenRequest = $payment->citizenRequest;
            $citizenRequest->update([
                'status' => \App\Models\CitizenRequest::STATUS_PENDING, // Maintenant STATUS_PENDING = 'en_attente'
                'payment_status' => \App\Models\CitizenRequest::PAYMENT_STATUS_PAID
            ]);

            // Créer une notification de succès
            \App\Models\Notification::create([
                'user_id' => $citizenRequest->user_id,
                'title' => '✅ Paiement effectué avec succès',
                'message' => "Félicitations ! Votre paiement de " . number_format($payment->amount, 0, ',', ' ') . " FCFA pour la demande de {$citizenRequest->type} (Référence: {$citizenRequest->reference_number}) a été effectué avec succès. Votre demande est maintenant soumise et en cours de traitement par nos services.",
                'type' => 'success',
                'data' => [
                    'payment_id' => $payment->id,
                    'request_id' => $citizenRequest->id,
                    'amount' => $payment->amount,
                    'request_type' => $citizenRequest->type,
                    'reference_number' => $citizenRequest->reference_number,
                    'payment_notification' => true,
                    'action_url' => route('requests.show', $citizenRequest->id),
                    'action_text' => 'Voir ma demande'
                ],
                'is_read' => false,
            ]);

            return redirect()->route('payments.result', $payment)
                ->with('payment_success', 'Félicitations ! Votre paiement de ' . number_format($payment->amount, 0, ',', ' ') . ' FCFA a été effectué avec succès ! Votre demande est maintenant soumise et en cours de traitement.');

        } catch (\Exception $e) {
            Log::error('Erreur lors du paiement mobile money', [
                'error' => $e->getMessage(),
                'payment_id' => $payment->id,
                'user_id' => Auth::id()
            ]);

            // Mettre à jour le statut du paiement en cas d'échec
            $payment->update([
                'status' => Payment::STATUS_FAILED
            ]);

            return redirect()->route('payments.result', $payment)
                ->with('payment_failed', 'Une erreur est survenue lors du paiement. Veuillez vérifier votre solde et réessayer.');
        }
    }

    /**
     * Affiche le statut d'un paiement
     */
    public function status(Payment $payment)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
        /*
        // Vérifier que le paiement appartient à l'utilisateur connecté
        /* BYPASSED FOR TESTING

        // BYPASSED FOR TESTING - Authorization check disabled
        /*
        if ($payment->citizenRequest->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */
        

        */*/

        try {
            // Vérifier le statut du paiement
            $status = $this->paymentService->checkPaymentStatus($payment);

            return view('front.payments.status', [
                'payment' => $payment,
                'request' => $payment->citizenRequest,
                'status' => $status,
            ]);
        } catch (\Exception $e) {
            Log::error('Erreur lors de la vérification du statut du paiement', [
                'error' => $e->getMessage(),
                'payment_id' => $payment->id,
                'user_id' => Auth::id(),
            ]);

            return redirect()->route('requests.show', $payment->citizenRequest)
                ->with('error', 'Une erreur est survenue lors de la vérification du statut du paiement.');
        }
    }

    /**
     * Affiche le résultat d'un paiement (succès ou échec)
     */
    public function result(Payment $payment)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
        /*
        // Vérifier que le paiement appartient à l'utilisateur connecté
        /* BYPASSED FOR TESTING

        // BYPASSED FOR TESTING - Authorization check disabled
        /*
        if ($payment->citizenRequest->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */
        

        */*/

        return view('front.payments.result', [
            'payment' => $payment,
            'request' => $payment->citizenRequest,
        ]);
    }

    /**
     * Annule un paiement
     */
    public function cancel(Payment $payment)
    {
        // TEMPORARY BYPASS FOR TESTING - Comment out authorization check
        /*
        // Vérifier que le paiement appartient à l'utilisateur connecté
        /* BYPASSED FOR TESTING

        // BYPASSED FOR TESTING - Authorization check disabled
        /*
        if ($payment->citizenRequest->user_id !== Auth::id()) {
            return redirect()->route('requests.index')
                ->with('error', 'Vous n\'êtes pas autorisé à effectuer cette action.');
        }
        */
        

        */*/

        // Vérifier que le paiement est en attente
        if (!$payment->isPending()) {
            return redirect()->route('payments.status', $payment)
                ->with('error', 'Ce paiement ne peut plus être annulé.');
        }

        try {
            // Annuler le paiement
            $this->paymentService->cancelPayment($payment);

            return redirect()->route('payments.show', $payment->citizenRequest)
                ->with('success', 'Le paiement a été annulé avec succès.');
        } catch (\Exception $e) {
            Log::error('Erreur lors de l\'annulation du paiement', [
                'error' => $e->getMessage(),
                'payment_id' => $payment->id,
                'user_id' => Auth::id(),
            ]);

            return redirect()->back()
                ->with('error', 'Une erreur est survenue lors de l\'annulation du paiement.');
        }
    }
}
